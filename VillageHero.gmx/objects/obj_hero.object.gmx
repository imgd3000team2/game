<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//movement
grav = 1;
hsp = 0;
vsp = 0;
jumpspeed = 14;
movespeed = 4;
xdirection = x+32;
last_move = 0;

//fighting
fight_countdown = 5;
fight_wait_time = 0;

//define these just in case
key_right = 0;
key_left = 0;
key_jump = 0;
key_fight = 0;
key_fight2 = 0;

obj_control.heroes_alive++;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///React to inputs, apply physics, detect collisions

//set sword direction
if(key_left == -1)
{
xdirection = x-32;
last_move = -1;
}
else
{
if(key_right == 1)
{
xdirection = x+32;
last_move = 1;
}
}

//determine horizontal move
move = key_left + key_right;

//check jumping
hsp = move * movespeed;
if (vsp &lt; 20) vsp += grav;
 
if (place_meeting(x,y+1,obj_wall) || place_meeting(x,y+1,obj_hero))
{
    vsp = key_jump * -jumpspeed
}

//Horizontal collisions with wall and other heroes
touchingwall = place_meeting(x+hsp,y,obj_wall);
touchinghero = place_meeting(x+hsp,y,obj_hero);
if (touchingwall || touchinghero)
{
if(touchingwall)
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
}
 
if(touchinghero)
{  
    while(!place_meeting(x+sign(hsp),y,obj_hero))
    {
        x += sign(hsp);
    }
}
    
    hsp = 0;
}

x += hsp;

//collision with enemy
if(collision_rectangle( x-24, y+24, x+24, y-24, obj_enemy, true, true ))
{
    instance_destroy();    
    
    obj_control.heroes_alive--;
    dfdf = instance_number(obj_hero);

}



//Vertical collsions with wall and other heroes
touchingwall = place_meeting(x,y+vsp,obj_wall);
touchinghero = place_meeting(x,y+vsp,obj_hero);

if (touchingwall|| touchinghero)
{
if(touchingwall){
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    }

if(touchinghero){    
    while(!place_meeting(x,y+sign(vsp),obj_hero))
    {
        y += sign(vsp);
    }
}
    
    vsp = 0;
}

y += vsp;



///fighting
if(key_fight &amp;&amp; (fight_wait_time == 0))
{
    //left
    if(last_move == -1)
    {     
        sprite_index = sprite_fight_left;
    }
    else 
    {  //right
    if((last_move == 1) || (last_move == 0))
    {        
        sprite_index = sprite_fight_right;
    }
    }    
    
    hitbox_inst_id = instance_create(xdirection, y, obj_sword_hitbox);
    
    hitbox_inst_id.follow_id = id;
    
    fight_wait_time = fight_countdown;
}
else
{

if(fight_wait_time &gt; 0)
{
//change sprite if possible
fight_wait_time--;
}

//set sprite based on direction
if(fight_wait_time == 0)
{
    //left
    if(last_move == -1)
    {        
        sprite_index = sprite_move_left;
    }
    else //right
    {
    if(last_move == 1)
    {        
        sprite_index = sprite_move_right;
    }
    else
    {
       sprite_index = sprite_move_right;
    }
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
